<?xml version="1.0" encoding="UTF-8"?>
<!-- Generated by org.testng.reporters.JUnitXMLReporter -->
<testsuite ignored="24" hostname="lsinbrvina2" failures="1" tests="23" name="Default test" time="18.97" errors="0" timestamp="2022-09-26T22:34:43 IST">
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="18.725">
    <failure type="java.lang.NullPointerException" message="Cannot invoke &amp;quot;String.replaceAll(String, String)&amp;quot; because &amp;quot;x&amp;quot; is null">
      <![CDATA[java.lang.NullPointerException: Cannot invoke "String.replaceAll(String, String)" because "x" is null
at com.aventstack.extentreports.ExtentTest.lambda$assignAuthor$1(ExtentTest.java:1041)
at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
at java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:762)
at com.aventstack.extentreports.ExtentTest.assignAuthor(ExtentTest.java:1040)
at com.sas.viya.BaseTest.setup(BaseTest.java:87)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:567)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:135)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:65)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:381)
at org.testng.internal.invokers.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:319)
at org.testng.TestRunner.invokeTestConfigurations(TestRunner.java:645)
at org.testng.TestRunner.beforeRun(TestRunner.java:634)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterMethod checkStatus" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterMethod checkStatus -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <skipped/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.SASKubernetesCluster" name="PodsValidation" time="0.0">
    <failure type="org.testng.TestNGException" message="
Parameter &amp;apos;namespace&amp;apos; is required by @Test on method PodsValidation but has not been marked @Optional or defined
in C:\Users\sinbrv\AppData\Local\Temp\testng-eclipse--755328761\testng-customsuite.xml">
      <![CDATA[org.testng.TestNGException: 
Parameter 'namespace' is required by @Test on method PodsValidation but has not been marked @Optional or defined
in C:\Users\sinbrv\AppData\Local\Temp\testng-eclipse--755328761\testng-customsuite.xml
at org.testng.internal.Parameters.createParams(Parameters.java:267)
at org.testng.internal.Parameters.createParametersForMethod(Parameters.java:355)
at org.testng.internal.Parameters.createParameters(Parameters.java:660)
at org.testng.internal.Parameters.handleParameters(Parameters.java:856)
at org.testng.internal.Parameters.handleParameters(Parameters.java:704)
at org.testng.internal.invokers.ParameterHandler.handleParameters(ParameterHandler.java:70)
at org.testng.internal.invokers.ParameterHandler.createParameters(ParameterHandler.java:49)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:904)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:193)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:808)
at org.testng.TestRunner.run(TestRunner.java:603)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:429)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:423)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:383)
at org.testng.SuiteRunner.run(SuiteRunner.java:326)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1249)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1169)
at org.testng.TestNG.runSuites(TestNG.java:1092)
at org.testng.TestNG.run(TestNG.java:1060)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
    </failure>
  </testcase> <!-- PodsValidation -->
  <testcase classname="com.sas.viya.SASKubernetesCluster" name="NodesValidation" time="0.001">
    <skipped/>
  </testcase> <!-- NodesValidation -->
  <testcase classname="com.sas.viya.SASStudio" name="SignIn" time="0.0">
    <skipped/>
  </testcase> <!-- SignIn -->
  <testcase classname="com.sas.viya.SASStudio" name="CodeExecution1" time="0.0">
    <skipped/>
  </testcase> <!-- CodeExecution1 -->
  <testcase classname="com.sas.viya.SASStudio" name="CodeExecution2" time="0.0">
    <skipped/>
  </testcase> <!-- CodeExecution2 -->
  <testcase classname="com.sas.viya.SASStudio" name="CodeExecution3" time="0.0">
    <skipped/>
  </testcase> <!-- CodeExecution3 -->
  <testcase classname="com.sas.viya.SASStudio" name="CodeExecution4" time="0.0">
    <skipped/>
  </testcase> <!-- CodeExecution4 -->
  <testcase classname="com.sas.viya.SASStudio" name="CodeExecution5" time="0.0">
    <skipped/>
  </testcase> <!-- CodeExecution5 -->
  <testcase classname="com.sas.viya.SASStudio" name="SignOut" time="0.0">
    <skipped/>
  </testcase> <!-- SignOut -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="SignIn" time="0.0">
    <skipped/>
  </testcase> <!-- SignIn -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="CheckUsersAndGroups" time="0.0">
    <skipped/>
  </testcase> <!-- CheckUsersAndGroups -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="ValidateValidationFolder" time="0.0">
    <skipped/>
  </testcase> <!-- ValidateValidationFolder -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="AccessServerPage" time="0.0">
    <skipped/>
  </testcase> <!-- AccessServerPage -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="ImportData" time="0.0">
    <skipped/>
  </testcase> <!-- ImportData -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="ImportDemographic" time="0.0">
    <skipped/>
  </testcase> <!-- ImportDemographic -->
  <testcase classname="com.sas.viya.SASEnvironmentManager" name="SignOut" time="0.0">
    <skipped/>
  </testcase> <!-- SignOut -->
  <testcase classname="com.sas.viya.SASNewWork" name="SignIn" time="0.0">
    <skipped/>
  </testcase> <!-- SignIn -->
  <testcase classname="com.sas.viya.SASDrive" name="SignIn" time="0.0">
    <skipped/>
  </testcase> <!-- SignIn -->
  <testcase classname="com.sas.viya.SASDrive" name="SignOut" time="0.0">
    <skipped/>
  </testcase> <!-- SignOut -->
  <testcase classname="com.sas.viya.SASVisualAnalytics" name="SignIn" time="0.0">
    <skipped/>
  </testcase> <!-- SignIn -->
  <testcase classname="com.sas.viya.SASVisualAnalytics" name="Report1" time="0.0">
    <skipped/>
  </testcase> <!-- Report1 -->
  <testcase classname="com.sas.viya.SASVisualAnalytics" name="Report2" time="0.0">
    <skipped/>
  </testcase> <!-- Report2 -->
  <testcase classname="com.sas.viya.SASVisualAnalytics" name="SignOut" time="0.0">
    <skipped/>
  </testcase> <!-- SignOut -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeTest setup" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeTest setup -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterTest teardown" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterTest teardown -->
  <testcase classname="com.sas.viya.BaseTest" name="@AfterSuite generateExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @AfterSuite generateExtentReports -->
  <testcase classname="com.sas.viya.BaseTest" name="@BeforeSuite initialiseExtentReports" time="0.0">
    <ignored/>
  </testcase> <!-- @BeforeSuite initialiseExtentReports -->
</testsuite> <!-- Default test -->
